.limitAmountContainer {
  &:focus-within > div > button,
  &[data-valid='true'] > div > button,
  & > div > button:hover {
    color: var(--m-text);
    transition: color 0.2s ease;
  }

  &[data-valid='false']:not(:focus-within):not(:hover) > div > button {
    color: var(--input-placeholder2);
    transition: color 0.2s ease;
  }
}

.incrementArrowsContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 1.25em;
  border-radius: var(--border-radius2);
  height: 80%;

  button {
    position: absolute;

    &:first-of-type {
      top: -0.25em;
    }

    &:last-of-type {
      bottom: -0.25em;
    }

    &:hover {
      color: var(--m-text);
    }
  }
}

.dollarRangeInputContainer {
  display: flex;
  justify-content: space-between;
  gap: 0.75em;
  align-items: center;
  position: relative;

  & > div {
    flex: 1;
  }
}

@function calculate_scale($keyframe) {
  @return calc(0.1 * sin(20 * $keyframe - 3.14) * exp(-7 * $keyframe) + 1);
}

// Define keyframes for split-left animation
@keyframes split-left {
  @for $i from 0 through 10 {
    $percent: 0% + $i * 10%;

    #{$percent} {
      transform: scaleX(calculate_scale(calc($i/10)));
      transform-origin: left;
    }
  }
}

// Define keyframes for split-right animation
@keyframes split-right {
  @for $i from 0 through 10 {
    $percent: 0% + $i * 10%;

    #{$percent} {
      transform: scaleX(calculate_scale(calc($i/10)));
      transform-origin: right;
    }
  }
}

.dollarRangeInputContainer {
  &[data-mode='range'] {
    & > div:first-child {
      transform: scaleX(1);
      animation: split-left 0.7s ease-out;
    }

    & > div:last-child {
      transform: scaleX(1);
      animation: split-right 0.7s ease-out;
    }
  }
}

.emojiPickerLedgetButtonContainer {
  padding-left: 1em;
}

.emojiComboTextInput {
  transform: translateX(1.25em);
}
