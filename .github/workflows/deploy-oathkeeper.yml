name: Oathkeeper pipeline

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: "string"
      version:
        description: "Version of the API"
        required: true
        type: "string"
      role:
        description: "Role to assume"
        required: true
        type: "string"
jobs:
  # Check if oathkeeper authorizer has changed
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      src: ${{ steps.changes.outputs.src }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
                - './oathkeeper/**'
  build:
    name: "Build and deploy authorizer"
    if: ${{ needs.changes.outputs.src == 'true' || github.event.inputs.force_run == 'true' }}
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build go executable
        run: |
          cd oathkeeper
          GOOS=linux GOARCH=arm64 go build -tags lambda.norpc -o bootstrap main.go
      - name: Render jsonnet
        uses: alexdglover/jsonnet-render@v2
        with:
          file: ./oathkeeper/rules.jsonnet
          output_file: ./oathkeeper/rules.json
          params: ${{ inputs.environment == 'prod' && 'domain=api.ledget.app' || 'domain=uat.ledget.app' }}  version=${{ inputs.version}}
      - name: Zip the files and layers
        working-directory: ./oathkeeper
        run: |
          mkdir -p out &&
          zip -r out/authorizer.zip bootstrap config.yml rules.json
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.role }}
          aws-region: "us-west-2"
      - name: Copy zip to s3
        working-directory: ./oathkeeper/out
        shell: bash
        env:
          bucket: ${{ inputs.environment == 'prod' && 'oathkeeper-authorization-prod' || 'oathkeeper-authorization-uat' }}
        run: |
          aws s3 sync --delete . s3://$bucket
