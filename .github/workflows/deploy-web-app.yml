on:
  workflow_call:
    inputs:
      app:
        required: true
        type: string
      version:
        required: true
        type: string
      s3-bucket:
        required: true
        type: string
      force_run_all:
        required: false
        type: boolean
        default: false
      role:
        required: true
        type: string
      environment:
        required: true
        type: string
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - './front/apps/${{ inputs.app }}/**'
  build:
    if: ${{ needs.changes.outputs.src == true || inputs.force_run_all == true }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: bun setup
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.21
      - uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Build ${{ inputs.app }}
        run: bun nx run ${{ inputs.app }}:build --mode ${{ inputs.environment }}
      - name: Dummy Test
        run: echo Dummy Test
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.role }}
          aws-region: us-west-2
      - name: Replace s3 bucket contents
        run: |
          aws s3 sync --delete ./apps/${{ inputs.app }}/dist s3://${{ inputs.s3-bucket }}/v${{ inputs.version }}
      - name: Create CloudFront invalidation
        uses: ./.github/actions/invalidate-cloudfront
        with:
          distribution: ${{ inputs.app == 'web-app' && 'ledget.app' || inputs.app == 'webportal' && 'accounts.ledget.app' }}
